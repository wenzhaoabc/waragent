
    def plan(
            self, initial_situation: str, current_situation: str, round_time: int
    ) -> list:
        if round_time == 1:
            plan_prompt = f"""{p_first_action_instruction(self.profile, self.secretary.country_profiles, initial_situation)}
            """

            secretary_check_times = 0
            secretary_agree = False
            while not secretary_agree:
                actions, _ = self.generate_correct_format_actions(plan_prompt, round_time)

                # formatted messages {"source": str, "action": str, "target": str, "message": str}
                formatted_messages = formatter.actions_format(self.name, actions)
                log.info(
                    f"Country {self.profile.country_name} plan: {formatted_messages}"
                )

                # 由秘书代理检查输入动作序列的逻辑性
                logic_suggestions = self.secretary.check_active_action_logic(
                    formatted_messages, self.stick, self.board
                )
                secretary_check_times += 1
                if logic_suggestions:
                    secretary_agree = False
                    if secretary_check_times > 3:
                        log.error(
                            f"Country {self.profile.country_name} plan: check action logic error, exceed max check times"
                        )
                        formatted_messages = self.secretary.modify_new(
                            formatted_messages, self.stick, self.board
                        )
                        log.warn(
                            f"{self.profile.country_name} has planed error 3 times, and Secretary generate the default plan: {formatted_messages}"
                        )
                        break
                else:
                    log.info(
                        f"Secretary has agree the plan generated by {self.profile.country_name}, with action list: {formatted_messages}"
                    )
                    secretary_agree = True

                # TODO : communicate with secretary to modify the actions
                actions_str = formatter.actions_to_json(actions)
                plan_prompt = f"""{self.profile}
                {p_situation(initial_situation)}
                {p_first_action_instruction_with_logic(actions_str, logic_suggestions)}"""
        else:
            action_histories = self.board.get_past_history()
            received_requests = self.board.get_country_requests(
                self.profile.country_name
            )
            received_requests_str = "\n".join([rr.message for rr in received_requests])
            plan_prompt = f"""{self.profile}
{p_later_action_instruction(round_time, action_histories, current_situation, received_requests_str)}
{p_situation(current_situation)}"""

            secretary_response_check_times = 0
            secretary_action_check_times = 0
            secretary_agree = False

            while not secretary_agree:
                new_actions, response_actions = self.generate_correct_format_actions(plan_prompt, round_time)
                # 动作格式化为自然语言
                response_formatted_messages = formatter.actions_format(self.name, response_actions)
                new_formatted_messages = formatter.actions_format(self.name, new_actions)

                log.info(
                    f"Country {self.profile.country_name} plan: {response_formatted_messages} ; {new_formatted_messages}"
                )

                # 回复及新动作逻辑检查
                response_check_suggestions = self.secretary.check_response_action_logic(
                    received_requests, response_formatted_messages
                )
                secretary_response_check_times += 1
                formatted_messages = response_formatted_messages + new_formatted_messages
                if response_check_suggestions:
                    secretary_agree = False
                    suggestions = response_check_suggestions
                    if secretary_response_check_times > 1:
                        response_formatted_messages = self.secretary.modify_responses(
                            received_requests, response_formatted_messages
                        )
                if not response_check_suggestions or secretary_response_check_times > 1:
                    """智能体回复无误 or 超过一次智能体回复检查次数"""
                    # 根据智能体的回复更新历史状态 TODO 确定更新状态的时机， 此处更新是否会导致重复更新
                    # self.board.update(response_formatted_messages, round_time)
                    action_check_suggestions = self.secretary.check_active_action_logic(
                        new_formatted_messages, self.stick, self.board)
                    secretary_action_check_times += 1
                    if not action_check_suggestions:
                        formatted_messages = response_formatted_messages + new_formatted_messages
                        secretary_agree = True
                        log.info(
                            f"Secretary has checked the proposed actions by {self.profile.country_name} and agree with the actions list: {new_formatted_messages}"
                        )
                        break
                    else:
                        secretary_agree = False
                        suggestions = response_check_suggestions + action_check_suggestions
                        if secretary_action_check_times > 3:
                            log.info(
                                f"Secretary has checked 4 times and still not agree with the action list by {self.profile.country_name}, thus the Secretary directly modifies the action list."
                            )
                            new_formatted_messages = self.secretary.modify_new(
                                new_formatted_messages, self.stick, self.board)
                            formatted_messages = response_formatted_messages + new_formatted_messages
                            secretary_agree = True
                            break
                log.info(
                    f"Secretary has checked and disagreed with the action list by {self.profile.country_name}. The secretary provides suggestions on how to generate."
                )
                plan_prompt = f"""{self.profile}\n\n{p_later_action_instruction(round_time, action_histories, current_situation, received_requests)}\n\n{p_situation(current_situation)}"""
                actions_str = formatter.actions_to_json(new_actions, response_actions)
                plan_prompt += p_later_action_logic_check(actions_str, suggestions)

        self.board.update(formatted_messages)
        return formatted_messages
